#!/usr/bin/env bash

##
# display how to use this command
##
function usage() {
  echo "Usage: $(basename $0) <what> <replacement> <where>"
  echo ""
  echo "  <what>            a regex match or string"
  echo "  <replacement>     a regex replace or string"
  echo "  <where>           a file or a folder"
  echo ""
}

# A top secret separator for sed command
# ascii chart - information separator one
SEP=$(echo -n "~")

##
# validate user input
##
function sanitize() {
  [ ! -z "${1}" ] && [ ! -z "${2}" ] && [ ! -z "${3}" ]
  return $?
}

##
# replace in one file
##
function replace() {

  local INP=${1}
  local OUTP=${2}

  shift 2

  local EXT=
  if [[ "$OSTYPE" == "darwin"* ]]; then
    EXT=".bak"
  fi

  echo "Replacing in ${@}"

  local PATTERN="s${SEP}${INP}${SEP}${OUTP}${SEP}g"

  sed -i ${EXT} ${PATTERN} ${@}

  return $?
}

##
# replace in many files
function replace_filter() {

  local INP=${1}
  local OUTP=${2}

  shift 2

  # a quick and dirty grep first to get a list of files matching the input patterns
  local FILES=($(grep --exclude=\*.bak --exclude=.git -Rl ${INP} ${@} | xargs))

  if [ ${#FILES[*]} -eq 0 ]; then
    echo "No files matching found."
    return 1
  fi

  # do the replace
  replace ${INP} ${OUTP} ${FILES[*]}
  return $?
}

function main() {
  sanitize $@

  if [ $? -ne 0 ]; then
    echo "Missing argument."
    usage
    return $?
  fi

  # filter valid files and replace
  replace_filter $@
  return $?
}

main $@

exit $?
